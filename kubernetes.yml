apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: mpmbackend
  name: mpmbackend
spec:
  type: NodePort
  ports:
  - name: "5000"
    port: 5000
    targetPort: 5000
  selector:
    app: mpmbackend
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mpmbackend
  name: mpmbackend
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mpmbackend
    spec:
      containers:
      - image: MPMBACKEND_CONTAINER_RELEASE_IMAGE
        name: mpm-server
        ports:
        - containerPort: 5001
        resources: {}
        env:
          - name: MPMBACKEND_PORT
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: mpmbackend_PORT
          - name: POSTGRES_URL
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_URL
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_HOST
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_PASSWORD
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_DB
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: mpm-secret
                key: POSTGRES_PORT
          
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.11
        command: ["/cloud_sql_proxy",
                  "-instances=DB_INSTANCE_CONNECTION_NAME=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        # [START cloudsql_security_context]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        # [END cloudsql_security_context]
        volumeMounts:
          - name: cloudsql-instance-credentials
            mountPath: /secrets/cloudsql
            readOnly: true  
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      restartPolicy: Always
status: {}
